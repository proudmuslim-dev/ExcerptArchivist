// File generated by Prisma Client Rust. DO NOT EDIT

pub static DATAMODEL_STR: &'static str =
    include_str!("/home/user/Projects/ExcerptArchivist/backend/prisma/schema.prisma");
static DATABASE_STR: &'static str = "sqlite";
pub async fn new_client() -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
    PrismaClient::_builder().build().await
}
pub async fn new_client_with_url(url: &str) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
    PrismaClient::_builder().with_url(url.to_string()).build().await
}
pub use _prisma::*;
pub mod _prisma {
    pub struct PrismaClientBuilder {
        url: Option<String>,
        action_notifier: ::prisma_client_rust::ActionNotifier,
    }
    impl PrismaClientBuilder {
        fn new() -> Self {
            Self {
                url: None,
                action_notifier: ::prisma_client_rust::ActionNotifier::new(),
            }
        }
        pub fn with_url(mut self, url: String) -> Self {
            self.url = Some(url);
            self
        }
        pub async fn build(self) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
            let internals =
                ::prisma_client_rust::PrismaClientInternals::new(self.url, self.action_notifier, super::DATAMODEL_STR)
                    .await?;
            Ok(PrismaClient(internals))
        }
    }
    pub struct PrismaClient(::prisma_client_rust::PrismaClientInternals);
    impl ::std::fmt::Debug for PrismaClient {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("PrismaClient").finish()
        }
    }
    impl PrismaClient {
        pub fn _builder() -> PrismaClientBuilder {
            PrismaClientBuilder::new()
        }
        pub fn _query_raw<T: ::prisma_client_rust::Data>(
            &self,
            query: ::prisma_client_rust::Raw,
        ) -> ::prisma_client_rust::QueryRaw<T> {
            ::prisma_client_rust::QueryRaw::new(&self.0, query, super::DATABASE_STR)
        }
        pub fn _execute_raw(&self, query: ::prisma_client_rust::Raw) -> ::prisma_client_rust::ExecuteRaw {
            ::prisma_client_rust::ExecuteRaw::new(&self.0, query, super::DATABASE_STR)
        }
        pub async fn _batch<'batch, T: ::prisma_client_rust::BatchContainer<'batch, Marker>, Marker>(
            &self,
            queries: T,
        ) -> ::prisma_client_rust::Result<<T as ::prisma_client_rust::BatchContainer<'batch, Marker>>::ReturnType>
        {
            ::prisma_client_rust::batch(queries, &self.0).await
        }
        pub fn _transaction(&self) -> ::prisma_client_rust::TransactionBuilder<Self> {
            ::prisma_client_rust::TransactionBuilder::_new(self, &self.0)
        }
        pub fn excerpt(&self) -> super::excerpt::Actions {
            super::excerpt::Actions { client: &self.0 }
        }
        pub fn image(&self) -> super::image::Actions {
            super::image::Actions { client: &self.0 }
        }
    }
    impl ::prisma_client_rust::PrismaClient for PrismaClient {
        fn internals(&self) -> &::prisma_client_rust::PrismaClientInternals {
            &self.0
        }
        fn internals_mut(&mut self) -> &mut ::prisma_client_rust::PrismaClientInternals {
            &mut self.0
        }
        fn with_tx_id(&self, tx_id: Option<::prisma_client_rust::query_core::TxId>) -> Self {
            Self(self.0.with_tx_id(tx_id))
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum ExcerptScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "createdAt")]
        CreatedAt,
        #[serde(rename = "excerpt")]
        Excerpt,
    }
    impl ToString for ExcerptScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::CreatedAt => "createdAt".to_string(),
                Self::Excerpt => "excerpt".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum ImageScalarFieldEnum {
        #[serde(rename = "path")]
        Path,
        #[serde(rename = "excerptId")]
        ExcerptId,
    }
    impl ToString for ImageScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Path => "path".to_string(),
                Self::ExcerptId => "excerptId".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum SortOrder {
        #[serde(rename = "asc")]
        Asc,
        #[serde(rename = "desc")]
        Desc,
    }
    impl ToString for SortOrder {
        fn to_string(&self) -> String {
            match self {
                Self::Asc => "asc".to_string(),
                Self::Desc => "desc".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum TransactionIsolationLevel {
        #[serde(rename = "Serializable")]
        Serializable,
    }
    impl ToString for TransactionIsolationLevel {
        fn to_string(&self) -> String {
            match self {
                Self::Serializable => "Serializable".to_string(),
            }
        }
    }
    impl ::prisma_client_rust::TransactionIsolationLevel for TransactionIsolationLevel {}
    impl Into<::prisma_client_rust::PrismaValue> for SortOrder {
        fn into(self) -> ::prisma_client_rust::PrismaValue {
            match self {
                SortOrder::Asc => ::prisma_client_rust::PrismaValue::String("asc".to_string()),
                SortOrder::Desc => ::prisma_client_rust::PrismaValue::String("desc".to_string()),
            }
        }
    }
    pub mod read_filters {
        #[derive(Debug, Clone)]
        pub enum StringFilter {
            Equals(String),
            InVec(Vec<String>),
            NotInVec(Vec<String>),
            Lt(String),
            Lte(String),
            Gt(String),
            Gte(String),
            Contains(String),
            StartsWith(String),
            EndsWith(String),
            Not(String),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for StringFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::InVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            value
                                .into_iter()
                                .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                .collect(),
                        ),
                    )]),
                    Self::NotInVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            value
                                .into_iter()
                                .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                .collect(),
                        ),
                    )]),
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Contains(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "contains".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::StartsWith(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "startsWith".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::EndsWith(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "endsWith".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                }
            }
        }
        #[derive(Debug, Clone)]
        pub enum StringNullableFilter {
            Equals(Option<String>),
            InVec(Vec<String>),
            NotInVec(Vec<String>),
            Lt(String),
            Lte(String),
            Gt(String),
            Gte(String),
            Contains(String),
            StartsWith(String),
            EndsWith(String),
            Not(Option<String>),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for StringNullableFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        value
                            .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                            .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                    )]),
                    Self::InVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            value
                                .into_iter()
                                .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                .collect(),
                        ),
                    )]),
                    Self::NotInVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            value
                                .into_iter()
                                .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                .collect(),
                        ),
                    )]),
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Contains(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "contains".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::StartsWith(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "startsWith".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::EndsWith(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "endsWith".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        value
                            .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                            .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                    )]),
                }
            }
        }
        #[derive(Debug, Clone)]
        pub enum IntFilter {
            Equals(i32),
            InVec(Vec<i32>),
            NotInVec(Vec<i32>),
            Lt(i32),
            Lte(i32),
            Gt(i32),
            Gte(i32),
            Not(i32),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for IntFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::InVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            value
                                .into_iter()
                                .map(|value| ::prisma_client_rust::PrismaValue::Int(value as i64))
                                .collect(),
                        ),
                    )]),
                    Self::NotInVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            value
                                .into_iter()
                                .map(|value| ::prisma_client_rust::PrismaValue::Int(value as i64))
                                .collect(),
                        ),
                    )]),
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                }
            }
        }
        #[derive(Debug, Clone)]
        pub enum DateTimeFilter {
            Equals(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
            InVec(Vec<::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>>),
            NotInVec(Vec<::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>>),
            Lt(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
            Lte(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
            Gt(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
            Gte(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
            Not(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for DateTimeFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                    Self::InVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            value
                                .into_iter()
                                .map(|value| ::prisma_client_rust::PrismaValue::DateTime(value))
                                .collect(),
                        ),
                    )]),
                    Self::NotInVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            value
                                .into_iter()
                                .map(|value| ::prisma_client_rust::PrismaValue::DateTime(value))
                                .collect(),
                        ),
                    )]),
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                }
            }
        }
    }
    pub mod write_params {
        #[derive(Debug, Clone)]
        pub enum DateTimeParam {
            Set(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
        }
        impl Into<::prisma_client_rust::PrismaValue> for DateTimeParam {
            fn into(self) -> ::prisma_client_rust::PrismaValue {
                match self {
                    Self::Set(value) => ::prisma_client_rust::PrismaValue::DateTime(value),
                }
            }
        }
        #[derive(Debug, Clone)]
        pub enum IntParam {
            Set(i32),
            Increment(i32),
            Decrement(i32),
            Multiply(i32),
            Divide(i32),
        }
        impl Into<::prisma_client_rust::PrismaValue> for IntParam {
            fn into(self) -> ::prisma_client_rust::PrismaValue {
                match self {
                    Self::Set(value) => ::prisma_client_rust::PrismaValue::Int(value as i64),
                    Self::Increment(value) => ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Decrement(value) => ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Multiply(value) => ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Divide(value) => ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                }
            }
        }
        #[derive(Debug, Clone)]
        pub enum StringParam {
            Set(String),
        }
        impl Into<::prisma_client_rust::PrismaValue> for StringParam {
            fn into(self) -> ::prisma_client_rust::PrismaValue {
                match self {
                    Self::Set(value) => ::prisma_client_rust::PrismaValue::String(value),
                }
            }
        }
        #[derive(Debug, Clone)]
        pub enum StringNullableParam {
            Set(Option<String>),
        }
        impl Into<::prisma_client_rust::PrismaValue> for StringNullableParam {
            fn into(self) -> ::prisma_client_rust::PrismaValue {
                match self {
                    Self::Set(value) => value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                }
            }
        }
    }
}
pub mod excerpt {
    use super::_prisma::*;
    pub const NAME: &str = "Excerpt";
    #[derive(Debug, Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(super::_prisma::read_filters::IntFilter),
        CreatedAt(super::_prisma::read_filters::DateTimeFilter),
        Excerpt(super::_prisma::read_filters::StringNullableFilter),
        ImagesSome(Vec<super::image::WhereParam>),
        ImagesEvery(Vec<super::image::WhereParam>),
        ImagesNone(Vec<super::image::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(::prisma_client_rust::merge_fields(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .collect(),
                    )),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(|p| ::prisma_client_rust::PrismaValue::Object(vec![p.into()]))
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(::prisma_client_rust::merge_fields(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .collect(),
                    )),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::CreatedAt(value) => (created_at::NAME, value.into()),
                Self::Excerpt(value) => (excerpt::NAME, value.into()),
                Self::ImagesSome(where_params) => (
                    images::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImagesEvery(where_params) => (
                    images::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImagesNone(where_params) => (
                    images::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
        }
    }
    #[derive(Debug, Clone)]
    pub enum UniqueWhereParam {
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => Self::Id(super::_prisma::read_filters::IntFilter::Equals(value)),
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Debug, Clone)]
    pub enum OrderByWithRelationParam {
        Id(super::SortOrder),
        CreatedAt(super::SortOrder),
        Excerpt(super::SortOrder),
        Images(Vec<super::image::OrderByRelationAggregateParam>),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByWithRelationParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            let (k, v) = match self {
                Self::Id(param) => ("id", param.into()),
                Self::CreatedAt(param) => ("createdAt", param.into()),
                Self::Excerpt(param) => ("excerpt", param.into()),
                Self::Images(param) => (
                    "images",
                    ::prisma_client_rust::PrismaValue::Object(param.into_iter().map(Into::into).collect()),
                ),
            };
            (k.to_string(), v)
        }
    }
    #[derive(Debug, Clone)]
    pub enum WithParam {
        Images(super::image::ManyArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Images(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections
                        .extend(<super::image::Types as ::prisma_client_rust::ModelTypes>::scalar_selections());
                    ::prisma_client_rust::Selection::new(images::NAME, None, arguments, nested_selections)
                }
            }
        }
    }
    #[derive(Debug, Clone)]
    pub enum SetParam {
        Id(super::_prisma::write_params::IntParam),
        CreatedAt(super::_prisma::write_params::DateTimeParam),
        Excerpt(super::_prisma::write_params::StringNullableParam),
        ConnectImages(Vec<super::image::UniqueWhereParam>),
        DisconnectImages(Vec<super::image::UniqueWhereParam>),
        SetImages(Vec<super::image::UniqueWhereParam>),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for SetParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            let (k, v) = match self {
                Self::Id(value) => (id::NAME, value.into()),
                Self::CreatedAt(value) => (created_at::NAME, value.into()),
                Self::Excerpt(value) => (excerpt::NAME, value.into()),
                Self::ConnectImages(where_params) => (
                    images::NAME,
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::image::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                Self::DisconnectImages(where_params) => (
                    images::NAME,
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::image::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                Self::SetImages(where_params) => (
                    images::NAME,
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::image::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
            };
            (k.to_string(), v)
        }
    }
    #[derive(Debug, Clone)]
    pub enum UncheckedSetParam {
        Id(super::_prisma::write_params::IntParam),
        CreatedAt(super::_prisma::write_params::DateTimeParam),
        Excerpt(super::_prisma::write_params::StringNullableParam),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for UncheckedSetParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            let (k, v) = match self {
                Self::Id(value) => ("id", value.into()),
                Self::CreatedAt(value) => ("createdAt", value.into()),
                Self::Excerpt(value) => ("excerpt", value.into()),
            };
            (k.to_string(), v)
        }
    }
    #[macro_export]
    macro_rules ! _select_excerpt { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { $ crate :: models :: prisma :: excerpt :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = $ crate :: models :: prisma :: excerpt :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([$ crate :: models :: prisma :: excerpt :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { $ crate :: models :: prisma :: excerpt :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = $ crate :: models :: prisma :: excerpt :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([$ crate :: models :: prisma :: excerpt :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , created_at , excerpt , images } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : $ crate :: models :: prisma :: excerpt :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> std :: result :: Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field ($ crate :: models :: prisma :: excerpt :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> std :: result :: Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ ($ crate :: models :: prisma :: excerpt :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> std :: result :: Result < Field , E > where E : :: serde :: de :: Error , { match value { $ ($ crate :: models :: prisma :: excerpt :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> std :: result :: Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field ($ crate :: models :: prisma :: excerpt :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field ($ crate :: models :: prisma :: excerpt :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "createdAt" , "excerpt" , "images"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { $ crate :: models :: prisma :: excerpt :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; images : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < images :: Data > } ; (@ field_type ; $ field : ident) => { $ crate :: models :: prisma :: excerpt :: $ field :: Type } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Excerpt" , available relations are "id, created_at, excerpt, images")) } ; (@ field_module ; images : $ selection_mode : ident { $ ($ selections : tt) + }) => { $ crate :: models :: prisma :: image :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < $ crate :: models :: prisma :: excerpt :: SelectParam > :: into ($ crate :: models :: prisma :: excerpt :: id :: Select) } ; (@ selection_field_to_selection_param ; created_at) => { Into :: < $ crate :: models :: prisma :: excerpt :: SelectParam > :: into ($ crate :: models :: prisma :: excerpt :: created_at :: Select) } ; (@ selection_field_to_selection_param ; excerpt) => { Into :: < $ crate :: models :: prisma :: excerpt :: SelectParam > :: into ($ crate :: models :: prisma :: excerpt :: excerpt :: Select) } ; (@ selection_field_to_selection_param ; images $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < $ crate :: models :: prisma :: excerpt :: SelectParam > :: into ($ crate :: models :: prisma :: excerpt :: images :: Select :: $ selection_mode ($ crate :: models :: prisma :: image :: ManyArgs :: new ($ crate :: models :: prisma :: image :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , $ crate :: models :: prisma :: image :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; images $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < $ crate :: models :: prisma :: excerpt :: SelectParam > :: into ($ crate :: models :: prisma :: excerpt :: images :: Select :: Fetch ($ crate :: models :: prisma :: image :: ManyArgs :: new ($ crate :: models :: prisma :: image :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ ($ crate :: models :: prisma :: excerpt :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; created_at) => { "createdAt" } ; (@ field_serde_name ; excerpt) => { "excerpt" } ; (@ field_serde_name ; images) => { "images" } ; }
    pub use _select_excerpt as select;
    pub enum SelectParam {
        Id(id::Select),
        CreatedAt(created_at::Select),
        Excerpt(excerpt::Select),
        Images(images::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::CreatedAt(data) => data.to_selection(),
                Self::Excerpt(data) => data.to_selection(),
                Self::Images(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_excerpt { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { $ crate :: models :: prisma :: excerpt :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = $ crate :: models :: prisma :: excerpt :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([$ crate :: models :: prisma :: excerpt :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < $ crate :: models :: prisma :: excerpt :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { $ crate :: models :: prisma :: excerpt :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = $ crate :: models :: prisma :: excerpt :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([$ crate :: models :: prisma :: excerpt :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < $ crate :: models :: prisma :: excerpt :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { images } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub created_at : :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > , pub excerpt : Option < String > , $ (pub $ field : $ crate :: models :: prisma :: excerpt :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> std :: result :: Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (created_at) , stringify ! (excerpt)] . len ()) ? ; $ (state . serialize_field ($ crate :: models :: prisma :: excerpt :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field ($ crate :: models :: prisma :: excerpt :: id :: NAME , & self . id) ? ; state . serialize_field ($ crate :: models :: prisma :: excerpt :: created_at :: NAME , & self . created_at) ? ; state . serialize_field ($ crate :: models :: prisma :: excerpt :: excerpt :: NAME , & self . excerpt) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , created_at , excerpt } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> std :: result :: Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ ($ crate :: models :: prisma :: excerpt :: $ field :: NAME) , + , $ crate :: models :: prisma :: excerpt :: id :: NAME , $ crate :: models :: prisma :: excerpt :: created_at :: NAME , $ crate :: models :: prisma :: excerpt :: excerpt :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> std :: result :: Result < Field , E > where E : :: serde :: de :: Error , { match value { $ ($ crate :: models :: prisma :: excerpt :: $ field :: NAME => Ok (Field :: $ field)) , * , $ crate :: models :: prisma :: excerpt :: id :: NAME => Ok (Field :: id) , $ crate :: models :: prisma :: excerpt :: created_at :: NAME => Ok (Field :: created_at) , $ crate :: models :: prisma :: excerpt :: excerpt :: NAME => Ok (Field :: excerpt) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> std :: result :: Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut created_at = None ; let mut excerpt = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field ($ crate :: models :: prisma :: excerpt :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: created_at => { if created_at . is_some () { return Err (:: serde :: de :: Error :: duplicate_field ($ crate :: models :: prisma :: excerpt :: created_at :: NAME)) ; } created_at = Some (map . next_value () ?) ; } Field :: excerpt => { if excerpt . is_some () { return Err (:: serde :: de :: Error :: duplicate_field ($ crate :: models :: prisma :: excerpt :: excerpt :: NAME)) ; } excerpt = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field ($ crate :: models :: prisma :: excerpt :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field ($ crate :: models :: prisma :: excerpt :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field ($ crate :: models :: prisma :: excerpt :: id :: NAME)) ? ; let created_at = created_at . ok_or_else (|| serde :: de :: Error :: missing_field ($ crate :: models :: prisma :: excerpt :: created_at :: NAME)) ? ; let excerpt = excerpt . ok_or_else (|| serde :: de :: Error :: missing_field ($ crate :: models :: prisma :: excerpt :: excerpt :: NAME)) ? ; Ok (Data { id , created_at , excerpt , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "createdAt" , "excerpt" , "images"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { $ crate :: models :: prisma :: excerpt :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; images : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < images :: Data > } ; (@ field_type ; $ field : ident) => { $ crate :: models :: prisma :: excerpt :: $ field :: Type } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Excerpt" , available relations are "images")) } ; (@ field_module ; images : $ selection_mode : ident { $ ($ selections : tt) + }) => { $ crate :: models :: prisma :: image :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; images $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < $ crate :: models :: prisma :: excerpt :: IncludeParam > :: into ($ crate :: models :: prisma :: excerpt :: images :: Include :: $ selection_mode ($ crate :: models :: prisma :: image :: ManyArgs :: new ($ crate :: models :: prisma :: image :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , $ crate :: models :: prisma :: image :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; images $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < $ crate :: models :: prisma :: excerpt :: IncludeParam > :: into ($ crate :: models :: prisma :: excerpt :: images :: Include :: Fetch ($ crate :: models :: prisma :: image :: ManyArgs :: new ($ crate :: models :: prisma :: image :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ ($ crate :: models :: prisma :: excerpt :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; created_at) => { "createdAt" } ; (@ field_serde_name ; excerpt) => { "excerpt" } ; (@ field_serde_name ; images) => { "images" } ; }
    pub use _include_excerpt as include;
    pub enum IncludeParam {
        Id(id::Include),
        CreatedAt(created_at::Include),
        Excerpt(excerpt::Include),
        Images(images::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::CreatedAt(data) => data.to_selection(),
                Self::Excerpt(data) => data.to_selection(),
                Self::Images(data) => data.to_selection(),
            }
        }
    }
    #[derive(Debug, Clone)]
    pub struct Create {
        pub _params: Vec<SetParam>,
    }
    impl Create {
        pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateQuery<'a> {
            client.excerpt().create(self._params)
        }
        pub fn to_params(mut self) -> Vec<SetParam> {
            self._params.extend([]);
            self._params
        }
    }
    pub fn create(_params: Vec<SetParam>) -> Create {
        Create { _params }
    }
    #[derive(Debug, Clone)]
    pub struct CreateUnchecked {
        pub _params: Vec<UncheckedSetParam>,
    }
    impl CreateUnchecked {
        pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateUncheckedQuery<'a> {
            client.excerpt().create_unchecked(self._params)
        }
        pub fn to_params(mut self) -> Vec<UncheckedSetParam> {
            self._params.extend([]);
            self._params
        }
    }
    pub fn create_unchecked(_params: Vec<UncheckedSetParam>) -> CreateUnchecked {
        CreateUnchecked { _params }
    }
    #[derive(Debug, Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByWithRelationParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(created_at::NAME),
                ::prisma_client_rust::sel(excerpt::NAME),
            ]
        }
    }
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: id::Type,
        #[serde(rename = "createdAt")]
        pub created_at: created_at::Type,
        #[serde(rename = "excerpt")]
        pub excerpt: excerpt::Type,
        #[serde(rename = "images")]
        pub images: Option<images::RecursiveSafeType>,
    }
    impl Data {
        pub fn images(&self) -> Result<&images::Type, ::prisma_client_rust::RelationNotFetchedError> {
            self.images
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(stringify!(images)))
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_excerpt { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { $ crate :: models :: prisma :: excerpt struct $ struct_name { # [serde (rename = "id")] pub id : $ crate :: models :: prisma :: excerpt :: id :: Type , # [serde (rename = "createdAt")] pub created_at : $ crate :: models :: prisma :: excerpt :: created_at :: Type , # [serde (rename = "excerpt")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub excerpt : $ crate :: models :: prisma :: excerpt :: excerpt :: Type } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_excerpt as partial_unchecked;
    ::prisma_client_rust::macros::filter_factory!(
        _excerpt_filter,
        models::prisma::excerpt,
        [
            (id, Scalar),
            (created_at, Scalar),
            (excerpt, Scalar),
            (images, Relation(models::prisma::image))
        ]
    );
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type CountQuery<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type CreateQuery<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateUncheckedQuery<'a> = ::prisma_client_rust::CreateUnchecked<'a, Types>;
    pub type CreateManyQuery<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUniqueQuery<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindManyQuery<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirstQuery<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type UpdateQuery<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateUncheckedQuery<'a> = ::prisma_client_rust::UpdateUnchecked<'a, Types>;
    pub type UpdateManyQuery<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type UpsertQuery<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type DeleteQuery<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteManyQuery<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUniqueQuery<'a> {
            FindUniqueQuery::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirstQuery<'a> {
            FindFirstQuery::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindManyQuery<'a> {
            FindManyQuery::new(self.client, _where)
        }
        pub fn create(self, mut _params: Vec<SetParam>) -> CreateQuery<'a> {
            _params.extend([]);
            CreateQuery::new(self.client, _params)
        }
        pub fn create_unchecked(self, mut _params: Vec<UncheckedSetParam>) -> CreateUncheckedQuery<'a> {
            _params.extend([]);
            CreateUncheckedQuery::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> UpdateQuery<'a> {
            UpdateQuery::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> UpdateUncheckedQuery<'a> {
            UpdateUncheckedQuery::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(self, _where: Vec<WhereParam>, _params: Vec<SetParam>) -> UpdateManyQuery<'a> {
            UpdateManyQuery::new(self.client, _where, _params)
        }
        pub fn upsert(self, _where: UniqueWhereParam, _create: Create, _update: Vec<SetParam>) -> UpsertQuery<'a> {
            UpsertQuery::new(self.client, _where.into(), _create.to_params(), _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> DeleteQuery<'a> {
            DeleteQuery::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteManyQuery<'a> {
            DeleteManyQuery::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> CountQuery<'a> {
            CountQuery::new(self.client, _where)
        }
    }
    pub mod created_at {
        use super::super::{_prisma::*, *};
        use super::{SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "createdAt";
        pub type Type = ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>;
        pub type RecursiveSafeType = Type;
        pub fn equals(
            value: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        ) -> WhereParam {
            WhereParam::CreatedAt(_prisma::read_filters::DateTimeFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::DateTimeFilter, CreatedAt, {
            fn in_vec(
                _: Vec<::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>>,
            ) -> InVec;
            fn not_in_vec(
                _: Vec<::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>>,
            ) -> NotInVec;
            fn lt(_: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>) -> Lt;
            fn lte(_: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>) -> Lte;
            fn gt(_: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>) -> Gt;
            fn gte(_: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>) -> Gte;
            fn not(_: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>) -> Not;
        });
        pub struct Order(SortOrder);
        pub fn order<T: From<Order>>(v: SortOrder) -> T {
            Order(v).into()
        }
        impl From<Order> for super::OrderByWithRelationParam {
            fn from(Order(v): Order) -> Self {
                Self::CreatedAt(v)
            }
        }
        pub struct Set(pub ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>);
        impl From<UpdateOperation> for SetParam {
            fn from(UpdateOperation(v): UpdateOperation) -> Self {
                Self::CreatedAt(v)
            }
        }
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::CreatedAt(_prisma::write_params::DateTimeParam::Set(v))
            }
        }
        pub fn set<T: From<Set>>(
            value: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        ) -> T {
            Set(value).into()
        }
        pub struct UpdateOperation(pub _prisma::write_params::DateTimeParam);
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::CreatedAt(_prisma::write_params::DateTimeParam::Set(v))
            }
        }
        impl From<UpdateOperation> for UncheckedSetParam {
            fn from(UpdateOperation(v): UpdateOperation) -> Self {
                Self::CreatedAt(v)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::CreatedAt(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::CreatedAt(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod excerpt {
        use super::super::{_prisma::*, *};
        use super::{SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "excerpt";
        pub type Type = Option<String>;
        pub type RecursiveSafeType = Type;
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::Excerpt(_prisma::read_filters::StringNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringNullableFilter, Excerpt, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn not(_: Option<String>) -> Not;
        });
        pub struct Order(SortOrder);
        pub fn order<T: From<Order>>(v: SortOrder) -> T {
            Order(v).into()
        }
        impl From<Order> for super::OrderByWithRelationParam {
            fn from(Order(v): Order) -> Self {
                Self::Excerpt(v)
            }
        }
        pub struct Set(pub Option<String>);
        impl From<UpdateOperation> for SetParam {
            fn from(UpdateOperation(v): UpdateOperation) -> Self {
                Self::Excerpt(v)
            }
        }
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::Excerpt(_prisma::write_params::StringNullableParam::Set(v))
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub struct UpdateOperation(pub _prisma::write_params::StringNullableParam);
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Excerpt(_prisma::write_params::StringNullableParam::Set(v))
            }
        }
        impl From<UpdateOperation> for UncheckedSetParam {
            fn from(UpdateOperation(v): UpdateOperation) -> Self {
                Self::Excerpt(v)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Excerpt(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Excerpt(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod id {
        use super::super::{_prisma::*, *};
        use super::{SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "id";
        pub type Type = i32;
        pub type RecursiveSafeType = Type;
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub struct Order(SortOrder);
        pub fn order<T: From<Order>>(v: SortOrder) -> T {
            Order(v).into()
        }
        impl From<Order> for super::OrderByWithRelationParam {
            fn from(Order(v): Order) -> Self {
                Self::Id(v)
            }
        }
        pub struct Set(pub i32);
        impl From<UpdateOperation> for SetParam {
            fn from(UpdateOperation(v): UpdateOperation) -> Self {
                Self::Id(v)
            }
        }
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(_prisma::write_params::IntParam::Set(v))
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub struct UpdateOperation(pub _prisma::write_params::IntParam);
        pub fn increment<T: From<UpdateOperation>>(value: i32) -> T {
            UpdateOperation(_prisma::write_params::IntParam::Increment(value)).into()
        }
        pub fn decrement<T: From<UpdateOperation>>(value: i32) -> T {
            UpdateOperation(_prisma::write_params::IntParam::Decrement(value)).into()
        }
        pub fn multiply<T: From<UpdateOperation>>(value: i32) -> T {
            UpdateOperation(_prisma::write_params::IntParam::Multiply(value)).into()
        }
        pub fn divide<T: From<UpdateOperation>>(value: i32) -> T {
            UpdateOperation(_prisma::write_params::IntParam::Divide(value)).into()
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(_prisma::write_params::IntParam::Set(v))
            }
        }
        impl From<UpdateOperation> for UncheckedSetParam {
            fn from(UpdateOperation(v): UpdateOperation) -> Self {
                Self::Id(v)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod images {
        use super::super::{_prisma::*, *};
        use super::{SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "images";
        pub type Type = Vec<image::Data>;
        pub type RecursiveSafeType = Type;
        pub fn some(value: Vec<image::WhereParam>) -> WhereParam {
            WhereParam::ImagesSome(value)
        }
        pub fn every(value: Vec<image::WhereParam>) -> WhereParam {
            WhereParam::ImagesEvery(value)
        }
        pub fn none(value: Vec<image::WhereParam>) -> WhereParam {
            WhereParam::ImagesNone(value)
        }
        pub struct Order(Vec<image::OrderByRelationAggregateParam>);
        pub fn order<T: From<Order>>(v: Vec<image::OrderByRelationAggregateParam>) -> T {
            Order(v).into()
        }
        impl From<Order> for super::OrderByWithRelationParam {
            fn from(Order(v): Order) -> Self {
                Self::Images(v)
            }
        }
        pub struct Fetch(pub image::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<image::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: image::OrderByWithRelationParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: image::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Images(v)
            }
        }
        pub fn fetch(params: Vec<image::WhereParam>) -> Fetch {
            Fetch(image::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<image::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectImages(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<image::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<image::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectImages(params)
        }
        pub fn set(params: Vec<image::UniqueWhereParam>) -> SetParam {
            SetParam::SetImages(params)
        }
        pub enum Select {
            Select(image::ManyArgs, Vec<image::SelectParam>),
            Include(image::ManyArgs, Vec<image::IncludeParam>),
            Fetch(image::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Images(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <image::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(args: image::ManyArgs, nested_selections: Vec<image::SelectParam>) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(args: image::ManyArgs, nested_selections: Vec<image::IncludeParam>) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Include {
            Select(image::ManyArgs, Vec<image::SelectParam>),
            Include(image::ManyArgs, Vec<image::IncludeParam>),
            Fetch(image::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Images(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections =
                            <image::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <image::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(args: image::ManyArgs, nested_selections: Vec<image::SelectParam>) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(args: image::ManyArgs, nested_selections: Vec<image::IncludeParam>) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
}
pub mod image {
    use super::_prisma::*;
    pub const NAME: &str = "Image";
    #[derive(Debug, Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Path(super::_prisma::read_filters::StringFilter),
        ExcerptIs(Vec<super::excerpt::WhereParam>),
        ExcerptIsNot(Vec<super::excerpt::WhereParam>),
        ExcerptId(super::_prisma::read_filters::IntFilter),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(::prisma_client_rust::merge_fields(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .collect(),
                    )),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(|p| ::prisma_client_rust::PrismaValue::Object(vec![p.into()]))
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(::prisma_client_rust::merge_fields(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .collect(),
                    )),
                ),
                Self::Path(value) => (path::NAME, value.into()),
                Self::ExcerptIs(where_params) => (
                    excerpt::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ExcerptIsNot(where_params) => (
                    excerpt::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ExcerptId(value) => (excerpt_id::NAME, value.into()),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
        }
    }
    #[derive(Debug, Clone)]
    pub enum UniqueWhereParam {
        PathEquals(String),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::PathEquals(value) => {
                    Self::Path(super::_prisma::read_filters::StringFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Debug, Clone)]
    pub enum OrderByWithRelationParam {
        Path(super::SortOrder),
        ExcerptId(super::SortOrder),
        Excerpt(Vec<super::excerpt::OrderByWithRelationParam>),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByWithRelationParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            let (k, v) = match self {
                Self::Path(param) => ("path", param.into()),
                Self::ExcerptId(param) => ("excerptId", param.into()),
                Self::Excerpt(param) => (
                    "excerpt",
                    ::prisma_client_rust::PrismaValue::Object(param.into_iter().map(Into::into).collect()),
                ),
            };
            (k.to_string(), v)
        }
    }
    #[derive(Debug, Clone)]
    pub enum OrderByRelationAggregateParam {
        _Count(super::SortOrder),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByRelationAggregateParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            let (k, v) = match self {
                Self::_Count(param) => ("_count", param.into()),
            };
            (k.to_string(), v)
        }
    }
    #[derive(Debug, Clone)]
    pub enum WithParam {
        Excerpt(super::excerpt::UniqueArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Excerpt(args) => {
                    let mut selections =
                        <super::excerpt::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(excerpt::NAME, None, [], selections)
                }
            }
        }
    }
    #[derive(Debug, Clone)]
    pub enum SetParam {
        Path(super::_prisma::write_params::StringParam),
        ConnectExcerpt(super::excerpt::UniqueWhereParam),
        ExcerptId(super::_prisma::write_params::IntParam),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for SetParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            let (k, v) = match self {
                Self::Path(value) => (path::NAME, value.into()),
                Self::ConnectExcerpt(where_param) => (
                    excerpt::NAME,
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::excerpt::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ExcerptId(value) => (excerpt_id::NAME, value.into()),
            };
            (k.to_string(), v)
        }
    }
    #[derive(Debug, Clone)]
    pub enum UncheckedSetParam {
        Path(super::_prisma::write_params::StringParam),
        ExcerptId(super::_prisma::write_params::IntParam),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for UncheckedSetParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            let (k, v) = match self {
                Self::Path(value) => ("path", value.into()),
                Self::ExcerptId(value) => ("excerptId", value.into()),
            };
            (k.to_string(), v)
        }
    }
    #[macro_export]
    macro_rules ! _select_image { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { $ crate :: models :: prisma :: image :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = $ crate :: models :: prisma :: image :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([$ crate :: models :: prisma :: image :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { $ crate :: models :: prisma :: image :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = $ crate :: models :: prisma :: image :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([$ crate :: models :: prisma :: image :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { path , excerpt , excerpt_id } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : $ crate :: models :: prisma :: image :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> std :: result :: Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field ($ crate :: models :: prisma :: image :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> std :: result :: Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ ($ crate :: models :: prisma :: image :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> std :: result :: Result < Field , E > where E : :: serde :: de :: Error , { match value { $ ($ crate :: models :: prisma :: image :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> std :: result :: Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field ($ crate :: models :: prisma :: image :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field ($ crate :: models :: prisma :: image :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["path" , "excerpt" , "excerptId"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { $ crate :: models :: prisma :: image :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; excerpt : $ selection_mode : ident { $ ($ selections : tt) + }) => { excerpt :: Data } ; (@ field_type ; $ field : ident) => { $ crate :: models :: prisma :: image :: $ field :: Type } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Image" , available relations are "path, excerpt, excerpt_id")) } ; (@ field_module ; excerpt : $ selection_mode : ident { $ ($ selections : tt) + }) => { $ crate :: models :: prisma :: excerpt :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; path) => { Into :: < $ crate :: models :: prisma :: image :: SelectParam > :: into ($ crate :: models :: prisma :: image :: path :: Select) } ; (@ selection_field_to_selection_param ; excerpt $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < $ crate :: models :: prisma :: image :: SelectParam > :: into ($ crate :: models :: prisma :: image :: excerpt :: Select :: $ selection_mode ($ crate :: models :: prisma :: excerpt :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; excerpt $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < $ crate :: models :: prisma :: image :: SelectParam > :: into ($ crate :: models :: prisma :: image :: excerpt :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; excerpt_id) => { Into :: < $ crate :: models :: prisma :: image :: SelectParam > :: into ($ crate :: models :: prisma :: image :: excerpt_id :: Select) } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ ($ crate :: models :: prisma :: image :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; path) => { "path" } ; (@ field_serde_name ; excerpt) => { "excerpt" } ; (@ field_serde_name ; excerpt_id) => { "excerptId" } ; }
    pub use _select_image as select;
    pub enum SelectParam {
        Path(path::Select),
        Excerpt(excerpt::Select),
        ExcerptId(excerpt_id::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Path(data) => data.to_selection(),
                Self::Excerpt(data) => data.to_selection(),
                Self::ExcerptId(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_image { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { $ crate :: models :: prisma :: image :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = $ crate :: models :: prisma :: image :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([$ crate :: models :: prisma :: image :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < $ crate :: models :: prisma :: image :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { $ crate :: models :: prisma :: image :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = $ crate :: models :: prisma :: image :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([$ crate :: models :: prisma :: image :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < $ crate :: models :: prisma :: image :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { excerpt } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub path : String , pub excerpt_id : i32 , $ (pub $ field : $ crate :: models :: prisma :: image :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> std :: result :: Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (path) , stringify ! (excerpt_id)] . len ()) ? ; $ (state . serialize_field ($ crate :: models :: prisma :: image :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field ($ crate :: models :: prisma :: image :: path :: NAME , & self . path) ? ; state . serialize_field ($ crate :: models :: prisma :: image :: excerpt_id :: NAME , & self . excerpt_id) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , path , excerpt_id } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> std :: result :: Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ ($ crate :: models :: prisma :: image :: $ field :: NAME) , + , $ crate :: models :: prisma :: image :: path :: NAME , $ crate :: models :: prisma :: image :: excerpt_id :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> std :: result :: Result < Field , E > where E : :: serde :: de :: Error , { match value { $ ($ crate :: models :: prisma :: image :: $ field :: NAME => Ok (Field :: $ field)) , * , $ crate :: models :: prisma :: image :: path :: NAME => Ok (Field :: path) , $ crate :: models :: prisma :: image :: excerpt_id :: NAME => Ok (Field :: excerpt_id) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> std :: result :: Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut path = None ; let mut excerpt_id = None ; while let Some (key) = map . next_key () ? { match key { Field :: path => { if path . is_some () { return Err (:: serde :: de :: Error :: duplicate_field ($ crate :: models :: prisma :: image :: path :: NAME)) ; } path = Some (map . next_value () ?) ; } Field :: excerpt_id => { if excerpt_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field ($ crate :: models :: prisma :: image :: excerpt_id :: NAME)) ; } excerpt_id = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field ($ crate :: models :: prisma :: image :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field ($ crate :: models :: prisma :: image :: $ field :: NAME)) ? ;) * let path = path . ok_or_else (|| serde :: de :: Error :: missing_field ($ crate :: models :: prisma :: image :: path :: NAME)) ? ; let excerpt_id = excerpt_id . ok_or_else (|| serde :: de :: Error :: missing_field ($ crate :: models :: prisma :: image :: excerpt_id :: NAME)) ? ; Ok (Data { path , excerpt_id , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["path" , "excerpt" , "excerptId"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { $ crate :: models :: prisma :: image :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; excerpt : $ selection_mode : ident { $ ($ selections : tt) + }) => { excerpt :: Data } ; (@ field_type ; $ field : ident) => { $ crate :: models :: prisma :: image :: $ field :: Type } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Image" , available relations are "excerpt")) } ; (@ field_module ; excerpt : $ selection_mode : ident { $ ($ selections : tt) + }) => { $ crate :: models :: prisma :: excerpt :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; excerpt $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < $ crate :: models :: prisma :: image :: IncludeParam > :: into ($ crate :: models :: prisma :: image :: excerpt :: Include :: $ selection_mode ($ crate :: models :: prisma :: excerpt :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; excerpt $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < $ crate :: models :: prisma :: image :: IncludeParam > :: into ($ crate :: models :: prisma :: image :: excerpt :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ ($ crate :: models :: prisma :: image :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; path) => { "path" } ; (@ field_serde_name ; excerpt) => { "excerpt" } ; (@ field_serde_name ; excerpt_id) => { "excerptId" } ; }
    pub use _include_image as include;
    pub enum IncludeParam {
        Path(path::Include),
        Excerpt(excerpt::Include),
        ExcerptId(excerpt_id::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Path(data) => data.to_selection(),
                Self::Excerpt(data) => data.to_selection(),
                Self::ExcerptId(data) => data.to_selection(),
            }
        }
    }
    #[derive(Debug, Clone)]
    pub struct Create {
        pub path: String,
        pub excerpt: super::excerpt::UniqueWhereParam,
        pub _params: Vec<SetParam>,
    }
    impl Create {
        pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateQuery<'a> {
            client.image().create(self.path, self.excerpt, self._params)
        }
        pub fn to_params(mut self) -> Vec<SetParam> {
            self._params
                .extend([path::set(self.path), excerpt::connect(self.excerpt)]);
            self._params
        }
    }
    pub fn create(path: String, excerpt: super::excerpt::UniqueWhereParam, _params: Vec<SetParam>) -> Create {
        Create { path, excerpt, _params }
    }
    #[derive(Debug, Clone)]
    pub struct CreateUnchecked {
        pub path: String,
        pub excerpt_id: i32,
        pub _params: Vec<UncheckedSetParam>,
    }
    impl CreateUnchecked {
        pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateUncheckedQuery<'a> {
            client
                .image()
                .create_unchecked(self.path, self.excerpt_id, self._params)
        }
        pub fn to_params(mut self) -> Vec<UncheckedSetParam> {
            self._params
                .extend([path::set(self.path), excerpt_id::set(self.excerpt_id)]);
            self._params
        }
    }
    pub fn create_unchecked(path: String, excerpt_id: i32, _params: Vec<UncheckedSetParam>) -> CreateUnchecked {
        CreateUnchecked {
            path,
            excerpt_id,
            _params,
        }
    }
    #[derive(Debug, Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByWithRelationParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(path::NAME),
                ::prisma_client_rust::sel(excerpt_id::NAME),
            ]
        }
    }
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "path")]
        pub path: path::Type,
        #[serde(rename = "excerpt")]
        pub excerpt: Option<excerpt::RecursiveSafeType>,
        #[serde(rename = "excerptId")]
        pub excerpt_id: excerpt_id::Type,
    }
    impl Data {
        pub fn excerpt(&self) -> Result<&super::excerpt::Data, ::prisma_client_rust::RelationNotFetchedError> {
            self.excerpt
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(stringify!(excerpt)))
                .map(|v| v.as_ref())
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_image { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { $ crate :: models :: prisma :: image struct $ struct_name { # [serde (rename = "path")] pub path : $ crate :: models :: prisma :: image :: path :: Type , # [serde (rename = "excerptId")] pub excerpt_id : $ crate :: models :: prisma :: image :: excerpt_id :: Type } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_image as partial_unchecked;
    ::prisma_client_rust::macros::filter_factory!(
        _image_filter,
        models::prisma::image,
        [
            (path, Scalar),
            (excerpt, Relation(models::prisma::excerpt)),
            (excerpt_id, Scalar)
        ]
    );
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type CountQuery<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type CreateQuery<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateUncheckedQuery<'a> = ::prisma_client_rust::CreateUnchecked<'a, Types>;
    pub type CreateManyQuery<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUniqueQuery<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindManyQuery<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirstQuery<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type UpdateQuery<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateUncheckedQuery<'a> = ::prisma_client_rust::UpdateUnchecked<'a, Types>;
    pub type UpdateManyQuery<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type UpsertQuery<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type DeleteQuery<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteManyQuery<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUniqueQuery<'a> {
            FindUniqueQuery::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirstQuery<'a> {
            FindFirstQuery::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindManyQuery<'a> {
            FindManyQuery::new(self.client, _where)
        }
        pub fn create(
            self,
            path: String,
            excerpt: super::excerpt::UniqueWhereParam,
            mut _params: Vec<SetParam>,
        ) -> CreateQuery<'a> {
            _params.extend([path::set(path), excerpt::connect(excerpt)]);
            CreateQuery::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            path: String,
            excerpt_id: i32,
            mut _params: Vec<UncheckedSetParam>,
        ) -> CreateUncheckedQuery<'a> {
            _params.extend([path::set(path), excerpt_id::set(excerpt_id)]);
            CreateUncheckedQuery::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> UpdateQuery<'a> {
            UpdateQuery::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> UpdateUncheckedQuery<'a> {
            UpdateUncheckedQuery::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(self, _where: Vec<WhereParam>, _params: Vec<SetParam>) -> UpdateManyQuery<'a> {
            UpdateManyQuery::new(self.client, _where, _params)
        }
        pub fn upsert(self, _where: UniqueWhereParam, _create: Create, _update: Vec<SetParam>) -> UpsertQuery<'a> {
            UpsertQuery::new(self.client, _where.into(), _create.to_params(), _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> DeleteQuery<'a> {
            DeleteQuery::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteManyQuery<'a> {
            DeleteManyQuery::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> CountQuery<'a> {
            CountQuery::new(self.client, _where)
        }
    }
    pub mod _count {
        use super::super::{_prisma::*, *};
        use super::{SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "_count";
        pub struct Order(super::SortOrder);
        pub fn order<T: From<Order>>(v: super::SortOrder) -> T {
            Order(v).into()
        }
        impl From<Order> for super::OrderByRelationAggregateParam {
            fn from(Order(v): Order) -> Self {
                Self::_Count(v)
            }
        }
    }
    pub mod excerpt {
        use super::super::{_prisma::*, *};
        use super::{SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "excerpt";
        pub type Type = excerpt::Data;
        pub type RecursiveSafeType = Box<excerpt::Data>;
        pub fn is(value: Vec<excerpt::WhereParam>) -> WhereParam {
            WhereParam::ExcerptIs(value)
        }
        pub fn is_not(value: Vec<excerpt::WhereParam>) -> WhereParam {
            WhereParam::ExcerptIsNot(value)
        }
        pub struct Order(Vec<excerpt::OrderByWithRelationParam>);
        pub fn order<T: From<Order>>(v: Vec<excerpt::OrderByWithRelationParam>) -> T {
            Order(v).into()
        }
        impl From<Order> for super::OrderByWithRelationParam {
            fn from(Order(v): Order) -> Self {
                Self::Excerpt(v)
            }
        }
        pub struct Fetch(pub excerpt::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<excerpt::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Excerpt(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(excerpt::UniqueArgs::new())
        }
        pub struct Connect(excerpt::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectExcerpt(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: excerpt::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub enum Select {
            Select(Vec<excerpt::SelectParam>),
            Include(Vec<excerpt::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Excerpt(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => selections.into_iter().map(|s| s.to_selection()).collect(),
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => <excerpt::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
                };
                ::prisma_client_rust::Selection::new("excerpt", None, [], selections)
            }
            pub fn select(nested_selections: Vec<excerpt::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<excerpt::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Include {
            Select(Vec<excerpt::SelectParam>),
            Include(Vec<excerpt::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Excerpt(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => selections.into_iter().map(|s| s.to_selection()).collect(),
                    Self::Include(selections) => {
                        let mut nested_selections =
                            <excerpt::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => <excerpt::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
                };
                ::prisma_client_rust::Selection::new("excerpt", None, [], selections)
            }
            pub fn select(nested_selections: Vec<excerpt::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<excerpt::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod excerpt_id {
        use super::super::{_prisma::*, *};
        use super::{SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "excerptId";
        pub type Type = i32;
        pub type RecursiveSafeType = Type;
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::ExcerptId(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, ExcerptId, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub struct Order(SortOrder);
        pub fn order<T: From<Order>>(v: SortOrder) -> T {
            Order(v).into()
        }
        impl From<Order> for super::OrderByWithRelationParam {
            fn from(Order(v): Order) -> Self {
                Self::ExcerptId(v)
            }
        }
        pub struct Set(pub i32);
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub struct UpdateOperation(pub _prisma::write_params::IntParam);
        pub fn increment<T: From<UpdateOperation>>(value: i32) -> T {
            UpdateOperation(_prisma::write_params::IntParam::Increment(value)).into()
        }
        pub fn decrement<T: From<UpdateOperation>>(value: i32) -> T {
            UpdateOperation(_prisma::write_params::IntParam::Decrement(value)).into()
        }
        pub fn multiply<T: From<UpdateOperation>>(value: i32) -> T {
            UpdateOperation(_prisma::write_params::IntParam::Multiply(value)).into()
        }
        pub fn divide<T: From<UpdateOperation>>(value: i32) -> T {
            UpdateOperation(_prisma::write_params::IntParam::Divide(value)).into()
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::ExcerptId(_prisma::write_params::IntParam::Set(v))
            }
        }
        impl From<UpdateOperation> for UncheckedSetParam {
            fn from(UpdateOperation(v): UpdateOperation) -> Self {
                Self::ExcerptId(v)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ExcerptId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ExcerptId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod path {
        use super::super::{_prisma::*, *};
        use super::{SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "path";
        pub type Type = String;
        pub type RecursiveSafeType = Type;
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::PathEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Path, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn not(_: String) -> Not;
        });
        pub struct Order(SortOrder);
        pub fn order<T: From<Order>>(v: SortOrder) -> T {
            Order(v).into()
        }
        impl From<Order> for super::OrderByWithRelationParam {
            fn from(Order(v): Order) -> Self {
                Self::Path(v)
            }
        }
        pub struct Set(pub String);
        impl From<UpdateOperation> for SetParam {
            fn from(UpdateOperation(v): UpdateOperation) -> Self {
                Self::Path(v)
            }
        }
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::Path(_prisma::write_params::StringParam::Set(v))
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub struct UpdateOperation(pub _prisma::write_params::StringParam);
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Path(_prisma::write_params::StringParam::Set(v))
            }
        }
        impl From<UpdateOperation> for UncheckedSetParam {
            fn from(UpdateOperation(v): UpdateOperation) -> Self {
                Self::Path(v)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Path(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Path(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
}
